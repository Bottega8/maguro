require_relative '../../lib/maguro'
require 'rails/generators/rails/app/app_generator'
require 'tmpdir'
require 'fileutils'

describe Maguro::AppGenerator do

  describe 'app generator command line options' do
    
    before(:example) do
      # Perform the exact same set up as in 'bin/maguro', 
      # so that it is almost as if we've run 'maguro new' on the command line
      templates_root = File.expand_path(File.join("..", "templates"), File.dirname(__FILE__))
      Maguro::AppGenerator.source_root templates_root
      Maguro::AppGenerator.source_paths << Rails::Generators::AppGenerator.source_root
      
      # Generates a unique directory
      @temp_directory = Dir.mktmpdir
      @pwd = Dir.pwd
      Dir.chdir @temp_directory
      puts "Generated and switched to temp directory #{@temp_directory}"
    end
    
    after(:example) do
      # Cleans up any files generated by the generator
      FileUtils.rm_rf(@temp_directory)
      Dir.chdir @pwd
      puts "Cleaned #{@temp_directory}"
    end
    
    
    it "should throw exception when no organization is passed in" do
      arguments = ["new", "test2", nil]
      
      result = Maguro::Cli.start(arguments)
      # TODO: the exception does not propagate up to here. 
      # How to get a return value, or the start output, or is there a better API to
      # perform this test?
    end
    
    it "should throw exception when there is a saved organization, and no organization is passed in" do
      # TODO fill in to test exception at line 42 in app_generator.rb
    end
  end

end